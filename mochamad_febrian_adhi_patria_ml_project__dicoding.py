# -*- coding: utf-8 -*-
"""Mochamad_Febrian_Adhi_Patria_ML_Project__Dicoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Id_NTGmaPV8s12sah58wKv0ImYotq_CX

#Machine Learning Project - Dicoding

**Kriteria submission yang harus penuhi:**

- Dataset yang dipakai haruslah dataset berikut : rockpaperscissors, atau gunakan link ini pada wget command: https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip
- Dataset harus dibagi menjadi train set dan validation set.
- Ukuran validation set harus 40% dari total dataset (data training memiliki 1314 sampel, dan data validasi sebanyak 874 sampel).
- Harus mengimplementasikan augmentasi gambar.
- Menggunakan image data generator.
- Model harus menggunakan model sequential.
- Pelatihan model tidak melebihi waktu 30 menit.
- Program dikerjakan pada Google Colaboratory.
- Akurasi dari model minimal 85%.
- Dapat memprediksi gambar yang diunggah ke Colab Manambahkan data diri (sesuai - profil Dicoding) pada submission/project yang dikirimkan

# Mengunduh data pada Google Collabs

- Mengunduh data sesuai dengan data set Dicoding
"""

!wget --no-check-certificate \
https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip

"""- Mengekstrak File Zip"""

import os
import zipfile

local_zip = '/content/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

"""# Membuat Dataset Training dan Validasi

- Menyiapkan Folder untuk Kertas Batu Gunting
"""

import os
folder_kertas = os.path.join('/content/rockpaperscissors/paper')
folder_batu = os.path.join('/content/rockpaperscissors/rock')
folder_gunting = os.path.join('/content/rockpaperscissors/scissors')

print('Jumlah gambar kertas :', len(os.listdir(folder_kertas)))
print('Jumlah gambar batu :', len(os.listdir(folder_batu)))
print('Jumlah gambar gunting :', len(os.listdir(folder_gunting)))

print('Menampilkan file gambar :')

file_kertas = os.listdir(folder_kertas)
print('Kertas :', file_kertas[:4])
file_batu = os.listdir(folder_batu)
print('Batu :', file_batu[:4])
file_gunting = os.listdir(folder_gunting)
print('Gunting :', file_gunting[:4])

"""- Menampilkan Gambar Kertas Batu Gunting dalam satu tampilan """

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

nrows = 3
ncols = 4
pic_index = 0

fig = plt.gcf()
fig.set_size_inches(ncols * 4, nrows * 3)

pic_index += 4
gambar_kertas = [os.path.join(folder_kertas, fname)
              for fname in file_kertas[pic_index-4:pic_index]]
gambar_batu = [os.path.join(folder_batu, fname) 
              for fname in file_batu[pic_index-4:pic_index]]
gambar_gunting = [os.path.join(folder_gunting, fname)
              for fname in file_gunting[pic_index-4:pic_index]]

for i, img_path in enumerate(gambar_kertas+gambar_batu+gambar_gunting):
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('off')
  img = mpimg.imread(img_path)
  plt.imshow(img)

plt.show()

"""# Penggunaan Image Generator

- Mengimpor Modul yang digunakan
"""

import tensorflow as tf
import keras_preprocessing 
from keras_preprocessing import image
from tensorflow.keras.optimizers import RMSprop
from keras_preprocessing.image import ImageDataGenerator

"""- Melakukan Augmentasi dan Pemisah data menjadi training dan Validation """

basis_dir = '/content/rockpaperscissors/rps-cv-images'
training_datagen = ImageDataGenerator(rescale = 1./255, 
                                      rotation_range=40,
                                      width_shift_range=0.2,
                                      height_shift_range=0.2,
                                      shear_range=0.2,
                                      zoom_range=0.2,
                                      horizontal_flip=True,
                                      fill_mode='nearest',
                                      validation_split=0.4
                                      )

"""- Pelabelan data menggunakan data image generator berdasarkan folder"""

train_generator = training_datagen.flow_from_directory(
                  basis_dir,
                  target_size = (100,150),
                  class_mode='categorical',
                  shuffle=True,
                  subset='training'
                  )
validation_generator = training_datagen.flow_from_directory(
                  basis_dir,
                  target_size = (100,150),
                  class_mode = 'categorical',
                  shuffle=True,
                  subset='validation'
                  )

"""# Pembuatan Model

- Pembuatan Model Sequential
"""

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(100, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2), 
    
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),  
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
    ])

model.summary()

"""- Kompilasi Model"""

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

"""# Melakukan Training Model """

history = model.fit(
    train_generator,
    steps_per_epoch=32,
    epochs=20,
    validation_data=validation_generator,
    validation_steps=4,
    verbose=2
    )

"""# Visualisasi Akurasi Training dan Validasi """

import matplotlib.pyplot as plt

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(len(acc))

plt.figure(figsize=(14, 4))

plt.subplot(1, 2, 1)
plt.title('Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.plot(acc, label='Akurasi Training')
plt.plot(val_acc, label='Akurasi Validasi', linestyle='--')
plt.legend()

plt.subplot(1, 2, 2)
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.plot(loss, label='Akurasi Training')
plt.plot(val_loss, label='Akurasi Validasi', linestyle='--')
plt.legend()

plt.show()

"""# Uji coba Model Klasifikasi Gambar """

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload() 
for fn in uploaded.keys():
  path = fn
  img = image.load_img(path, target_size=(100,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  
  print(fn)
  if classes[0][0]==1:
    print('Gambar ini adalah  Kertas')
  elif classes[0][1]==1:
    print('Gambar Ini adalah Batu')
  elif classes[0][2]==1:
    print('Gambar ini adalah Gunting')
  else:
    print('unknown')

"""- Mochamad Febrian Adhi Patria
- DigiTalent Scholarship - Machine Learning
- Project Akhir Klasifikasi Gambar - Belajar Machine Learning Untuk Pemula

"""
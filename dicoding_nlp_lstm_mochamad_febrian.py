# -*- coding: utf-8 -*-
"""Dicoding_NLP_LSTM_Mochamad Febrian .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OYnt9dY7raWgzlWK5ltSTSasRCCBjf8I

# Proyek Pertama Dicoding : Membuat Model NLP dengan TensorFlow

**Kriteria Submision yang Harus Dipenuhi**
- Dataset yang akan dipakai bebas, namun minimal memiliki 1000 sampel.
- Harus menggunakan LSTM dalam arsitektur model.
- Harus menggunakan model sequential.
- Validation set sebesar 20% dari total dataset.
- Harus menggunakan Embedding.
- Harus menggunakan fungsi tokenizer.
- Akurasi dari model minimal 75%.

# Mengunduh data set
"""

from google.colab import drive
drive.mount('/content/drive')

import csv
import numpy as np
import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')
STOPWORDS = set(stopwords.words('english'))

articles = []
labels =[]

with open('/content/drive/MyDrive/Data/bbc-text.csv', 'r') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    next(reader)
    for row in reader:
        labels.append(row[0])
        article = row[1]
        for word in STOPWORDS:
            token = ' ' + word + ' '
            article = article.replace(token, ' ')
            article = article.replace(' ', ' ')
        articles.append(article)
print('Jumlah data artikel yang dikelola pada data set : ', len(articles))
print('Jumlah data label yang dikelola pada data set : ', len(labels))

"""# Data Preparation

- Menyiapkan Variable
"""

vocab_size = 5000
embedding_dim = 64
max_length = 200
trunc_type = 'post'
padding_type = 'post'
oov_tok = '-'
training_portion = .8

"""- Membagi data test dan validasi"""

train_size = int(len(articles) * training_portion)

train_articles = articles[0: train_size]
train_labels = labels[0: train_size]

validation_articles = articles[train_size:]
validation_labels = labels[train_size:]

"""- Membuat Tokenizer"""

import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

tokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok)
tokenizer.fit_on_texts(train_articles)
word_index = tokenizer.word_index
dict(list(word_index.items())[0:10])

train_sequences = tokenizer.texts_to_sequences(train_articles)
train_padded = pad_sequences(train_sequences,
                             maxlen=max_length,
                             padding=padding_type,
                             truncating=trunc_type)

validation_sequences = tokenizer.texts_to_sequences(validation_articles)
validation_padded = pad_sequences(validation_sequences,
                                  maxlen=max_length,
                                  padding=padding_type,
                                  truncating=trunc_type)

label_tokenizer = Tokenizer()
label_tokenizer.fit_on_texts(labels)

training_label_seq = np.array(
    label_tokenizer.texts_to_sequences(train_labels))
validation_label_seq = np.array(
    label_tokenizer.texts_to_sequences(validation_labels))

reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])

def decode_article(text):
    return ' '.join([reverse_word_index.get(i, '?') for i in text])
print(decode_article(train_padded[10]))
print('---')
print(train_articles[10])

"""# Membuat dan Melatih Model NLP Sequential

Membuat Model Sequential dari Tensorflow dengan dengen menerapkan sitem Embedding dan  Arsitektur LSTM dengan menerapkan sistem Callbacks

- Membuat Model Sequential
"""

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(vocab_size, embedding_dim),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),
    tf.keras.layers.Dense(embedding_dim, activation='relu'),
    tf.keras.layers.Dense(6, activation='softmax')])
model.summary()

"""- Membuat fungsi Callbacks"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9):
      print("\nAkurasi telah mencapai >90%!")
      self.model.stop_training = True
callbacks = myCallback()

"""- Melakukan compilasi Model """

model.compile(loss='sparse_categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

"""- Melakukan Training data """

num_epochs = 20
history = model.fit(train_padded, training_label_seq, epochs=num_epochs, 
                    validation_data=(validation_padded, validation_label_seq), verbose=2, callbacks=[callbacks])

"""# Membuat Plot Akurasi Training dan Validasi"""

import matplotlib.pyplot as plt
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(len(acc))

plt.figure(figsize=(14, 4))

plt.subplot(1, 2, 1)
plt.title('Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.plot(acc, label='Akurasi Training')
plt.plot(val_acc, label='Akurasi Validasi', linestyle='--')
plt.legend()

plt.subplot(1, 2, 2)
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.plot(loss, label='Akurasi Training')
plt.plot(val_loss, label='Akurasi Validasi', linestyle='--')
plt.legend()

plt.show()

"""# Identitas Diri
- Nama : Mochamad Febrian Adhi Patria
- Peserta digitalent Scholarship 2021
- Proyek Pertama Dicoding : Membuat Model NLP dengan TensorFlow
"""